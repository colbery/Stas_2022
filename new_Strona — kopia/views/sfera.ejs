<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <link href="http://fonts.cdnfonts.com/css/pattaya" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./css/style.css" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Staatliches&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&family=Staatliches&display=swap"
      rel="stylesheet"
    />
    <script type="text/javascript">
      var gl;
      var shaderProgram;
      var uPMatrix;
      var vertexPositionBuffer;
      //var vertexColorBuffer;
      var indexBuffer;

      function MatrixMul(a, b) {
        //Mnożenie macierzy
        c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (let i = 0; i < 4; i++) {
          for (let j = 0; j < 4; j++) {
            c[i * 4 + j] = 0.0;
            for (let k = 0; k < 4; k++) {
              c[i * 4 + j] += a[i * 4 + k] * b[k * 4 + j];
            }
          }
        }
        return c;
      }

      function createDodecahedron() {
        const t = (1 + Math.sqrt(5)) / 2;
        const d = t - 1;

        let vertexPosition = [
          1,
          1,
          1,
          t,
          0,
          d,
          t,
          0,
          -d, //*/

          1,
          1,
          1,
          t,
          0,
          -d,
          1,
          1,
          -1, //*/

          1,
          1,
          1,
          1,
          1,
          -1,
          d,
          t,
          0, //*/

          t,
          0,
          -d,
          1,
          -1,
          -1,
          0,
          -d,
          -t, //*/

          t,
          0,
          -d,
          0,
          -d,
          -t,
          0,
          d,
          -t, //*/

          t,
          0,
          -d,
          0,
          d,
          -t,
          1,
          1,
          -1, //*/

          0,
          -d,
          -t,
          -1,
          -1,
          -1,
          -t,
          0,
          -d, //*/

          0,
          -d,
          -t,
          -t,
          0,
          -d,
          -1,
          1,
          -1, //*/

          0,
          -d,
          -t,
          -1,
          1,
          -1,
          0,
          d,
          -t, //*/

          -t,
          0,
          d,
          -1,
          -1,
          1,
          0,
          -d,
          t, //*/

          -t,
          0,
          d,
          0,
          -d,
          t,
          0,
          d,
          t, //*/

          -t,
          0,
          d,
          0,
          d,
          t,
          -1,
          1,
          1, //*/

          0,
          d,
          t,
          0,
          -d,
          t,
          1,
          -1,
          1, //*/

          0,
          d,
          t,
          1,
          -1,
          1,
          t,
          0,
          d, //*/

          0,
          d,
          t,
          t,
          0,
          d,
          1,
          1,
          1, //*/

          t,
          0,
          d,
          1,
          -1,
          1,
          d,
          -t,
          0, //*/

          t,
          0,
          d,
          d,
          -t,
          0,
          1,
          -1,
          -1, //*/

          t,
          0,
          d,
          1,
          -1,
          -1,
          t,
          0,
          -d, //*/

          1,
          1,
          -1,
          0,
          d,
          -t,
          -1,
          1,
          -1, //*/
          //*
          //_________________________________________________________
          //wierzcholki ze zla interpolacją na teksture

          // -1,  1,  1,
          // 0,  d,  t,
          // 1,  1,  1,//*/

          // -1,  1,  1,
          //   1,  1,  1,
          //   d,  t,  0,//*/

          // -1,  1,  1,
          //   d,  t,  0,
          // -d,  t,  0,//*/

          //  -1, -1, -1,
          //  -d, -t,  0,
          //  -1, -1,  1,//*/

          //  -1, -1, -1,
          //  -1, -1,  1,
          //  -t,  0,  d,//*/

          //  -1, -1, -1,
          //  -t,  0,  d,
          //  -t,  0, -d,//*/

          //  -1,  1, -1,
          //  -t,  0, -d,
          //  -t,  0,  d,//*/

          //  -1,  1, -1,
          //  -t,  0,  d,
          //  -1,  1,  1,//*/

          //  -1,  1, -1,
          //  -1,  1,  1,
          //  -d,  t,  0,//*/

          //   1, -1, -1,
          //   d, -t,  0,
          //  -d, -t,  0,//*/

          //   1, -1, -1,
          //  -d, -t,  0,
          //  -1, -1, -1,//*/

          //   1, -1, -1,
          //  -1, -1, -1,
          //   0, -d, -t,//*/

          //            -1, -1, -1,
          //            -d, -t,  0,
          //            -1, -1,  1,//*/

          //            -1, -1, -1,
          //            -1, -1,  1,
          //            -t,  0,  d,//*/

          //            -1, -1, -1,
          //            -t,  0,  d,
          //            -t,  0, -d,//*/

          //            -1,  1, -1,
          //            -t,  0, -d,
          //            -t,  0,  d,//*/

          //            -1,  1, -1,
          //            -t,  0,  d,
          //            -1,  1,  1,//*/

          //            -1,  1, -1,
          //            -1,  1,  1,
          //            -d,  t,  0,//*/

          //                       -1,  1,  1,
          //             d,  t,  0,
          //           -d,  t,  0,//*/

          //             1,  1, -1,
          //            -1,  1, -1,
          //            -d,  t,  0,//*/

          //             1,  1, -1,
          //            -d,  t,  0,
          //             d,  t,  0,//*/

          //            -1, -1,  1,
          //            -d, -t,  0,
          //             d, -t,  0,//*/
          //  //*
          //            -1, -1,  1,
          //   	        d, -t,  0,
          //             1, -1,  1,//*/
          //   //*
          //            -1, -1,  1,
          //             1, -1,  1,
          //             0, -d,  t//*/

          //_________________________________________________________

          //poprawione wierzcholki
          -d,
          -t,
          -0.000001,
          -t,
          0,
          -0.000001,
          -t,
          0,
          -d, //*/

          -d,
          -t,
          0,
          -t,
          0,
          d,
          -t,
          0,
          0, //*/

          -d,
          -t,
          -0.000001,
          -t,
          0,
          -d, //*/
          -1,
          -1,
          -1,

          -d,
          -t,
          0,
          -1,
          -1,
          1,
          -t,
          0,
          d,

          //___________________________________________
          -d,
          t,
          -0.000001,
          -t,
          0,
          -d,
          -t,
          0,
          -0.00001, //*/

          -d,
          t,
          0,
          -t,
          0,
          0,
          -t,
          0,
          d, //*/

          -d,
          t,
          0,
          -t,
          0,
          d,
          -1,
          1,
          1, //*/

          -d,
          t,
          -0.0000001,
          -1,
          1,
          -1,
          -t,
          0,
          -d, //*/

          //___________________________________________

          0,
          -d,
          -t,
          -1,
          -1,
          -1,
          1,
          -1,
          -1, //*/

          1,
          -1,
          -1,
          -1,
          -1,
          -1,
          0,
          -t + 0.00001,
          -0.00001,

          -1,
          -1,
          -1,
          0,
          -t + 0.00001,
          -0.00001,
          -d,
          -t + 0.00001,
          -0.00001,

          1,
          -1,
          -1,
          0,
          -t + 0.00001,
          -0.00001,
          d,
          -t + 0.00001,
          -0.00001,

          //___________________________________________
          0,
          -d,
          t,
          -1,
          -1,
          1,
          1,
          -1,
          1, //*/

          1,
          -1,
          1,
          -1,
          -1,
          1,
          0,
          -t + 0.00001,
          0.00001,

          -1,
          -1,
          1,
          0,
          -t + 0.00001,
          0.00001,
          -d,
          -t + 0.00001,
          0.00001,

          1,
          -1,
          1,
          0,
          -t + 0.00001,
          0.00001,
          d,
          -t + 0.00001,
          0.00001,

          //___________________________________________
          0,
          d,
          t,
          -1,
          1,
          1,
          1,
          1,
          1, //*/

          1,
          1,
          1,
          -1,
          1,
          1,
          0,
          t + 0.00001,
          0.00001,

          -1,
          1,
          1,
          0,
          t + 0.00001,
          0.00001,
          -d,
          t + 0.00001,
          0.00001,

          1,
          1,
          1,
          0,
          t + 0.00001,
          0.00001,
          d,
          t + 0.00001,
          0.00001,

          //___________________________________________
          1,
          1,
          -1,
          -1,
          1,
          -1,
          0,
          t + 0.00001,
          -0.00001,

          -1,
          1,
          -1,
          0,
          t + 0.00001,
          -0.00001,
          -d,
          t + 0.00001,
          -0.00001,

          1,
          1,
          -1,
          0,
          t + 0.00001,
          -0.00001,
          d,
          t + 0.00001,
          -0.00001,
        ];

        return vertexPosition;
      }

      function createCoordsDode() {
        let position = createDodecahedron();
        let vertexCoords = [];

        for (let i = 0; i < position.length; i += 3) {
          const X = position[i + 0];
          const Y = position[i + 1];
          const Z = position[i + 2];
          const fi = Math.atan2(-Z, X); //atan(-Z/X)
          const phi = Math.asin(Y / Math.sqrt(X * X + Y * Y + Z * Z)); //asin(Y/|R|)
          const u = fi / (2 * Math.PI) + 0.5;
          const v = phi / Math.PI + 0.5;

          vertexCoords.push(...[u, v]);
        }

        // console.log(position.length);
        return vertexCoords;
      }

      function startGL() {
        f.onchange = upload;
        f.onload = upload;
        var img = "";
        var keys = [];
        var bytes = 0;
      

        function getKeys() {
          localforage.keys().then(function (keys) {
            this.keys = [];
            var f = document.getElementById("f");

            var wybierz = document.getElementById("wybierzf");
            var wybierzbutton = document.getElementById("wybierzfbutton");
            var wyczyscbutton = document.getElementById("clear_button");
            var ul = document.getElementById("list");

            if (keys.length === 1) {
              f.setAttribute("disabled", "disabled");
              wybierz.classList.add("text-goldish");
              wybierzbutton.classList.remove("bg-goldish");
              wybierzbutton.classList.add(
                "bg-blackish",
                "border-2",
                "border-goldish"
              );

              showImage(keys);
            }
            if (keys.length > 0) {
              clear_btn.disabled = false;
              clear_btn.classList.remove("text-goldish");
              wyczyscbutton.classList.remove("bg-blackish");
              wyczyscbutton.classList.add("bg-goldish");
            }

            for (let i = 0; i < keys.length; i++) {
              var li = document.createElement("li");
              li.appendChild(document.createTextNode(keys[i]));
              //ul.appendChild(li);

              this.keys.push(keys[i]);
            }

           
          });
        }
        getKeys();
        //getFile();

        function stopAll() {
         
          if (this.img) {
            clearImage();
          }
        }

        function showImage(filename) {
          
          localforage.getItem(filename).then((blob) => {
            textureImg.src = URL.createObjectURL(blob);
            console.log(textureImg.src);
          });
        }

        function clearImage() {
          textureImg.src = "";
          this.img.style.display = "none";
        }

        function upload() {
          const promises = [];
  

          for (let i = 0; i < this.files.length; i++) {
            const promise = localforage.setItem(this.files[i].name, f.files[i]);
           
            promises.push(promise);
          }

          Promise.all(promises).then(() => {
           
            getKeys();
          });
        }

      
        let canvas = document.getElementById("canvas3D"); //wyszukanie obiektu w strukturze strony
        gl = canvas.getContext("experimental-webgl"); //pobranie kontekstu OpenGL'u z obiektu canvas
        gl.viewportWidth = canvas.width; //przypisanie wybranej przez nas rozdzielczości do systemu OpenGL
        gl.viewportHeight = canvas.height;

        //Kod shaderów
        const vertextShaderSource = ` //Znak akcentu z przycisku tyldy - na lewo od przycisku 1 na klawiaturze
          precision highp float;
          attribute vec3 aVertexPosition; 
          //attribute vec3 aVertexColor;
          attribute vec2 aVertexCoords;
          uniform mat4 uMVMatrix;
          uniform mat4 uPMatrix;
          varying vec3 vColor;
          varying vec2 vTexUV;
      
      
          void main(void) {
            gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); //Dokonanie transformacji położenia punktów z przestrzeni 3D do przestrzeni obrazu (2D)
            //vColor = aVertexColor;
            vTexUV = aVertexCoords;
          }
        `;
        const fragmentShaderSource = `
          precision highp float;
          //varying vec3 vColor;
          varying vec2 vTexUV;
          
          uniform sampler2D uSampler;
          void main(void) {
            //gl_FragColor = vec4(vColor,1.0); //Ustalenie stałego koloru wszystkich punktów sceny
            gl_FragColor = texture2D(uSampler,vTexUV); //Odczytanie punktu tekstury i przypisanie go jako koloru danego punktu renderowaniej figury
          }
        `;
        let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER); //Stworzenie obiektu shadera
        let vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(fragmentShader, fragmentShaderSource); //Podpięcie źródła kodu shader
        gl.shaderSource(vertexShader, vertextShaderSource);
        gl.compileShader(fragmentShader); //Kompilacja kodu shader
        gl.compileShader(vertexShader);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
          //Sprawdzenie ewentualnych błedów kompilacji
          alert(gl.getShaderInfoLog(fragmentShader));
          return null;
        }
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
          alert(gl.getShaderInfoLog(vertexShader));
          return null;
        }

        shaderProgram = gl.createProgram(); //Stworzenie obiektu programu
        gl.attachShader(shaderProgram, vertexShader); //Podpięcie obu shaderów do naszego programu wykonywanego na karcie graficznej
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
          alert("Could not initialise shaders"); //Sprawdzenie ewentualnych błedów

        let vertexPosition = createDodecahedron();
        // console.log(vertexPosition.length);

        vertexPositionBuffer = gl.createBuffer(); //Stworzenie tablicy w pamieci karty graficznej
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array(vertexPosition),
          gl.STATIC_DRAW
        );
        vertexPositionBuffer.itemSize = 3; //zdefiniowanie liczby współrzednych per wierzchołek
        vertexPositionBuffer.numItems = vertexPosition.length / (3 * 3); //Zdefinoiowanie liczby punktów w naszym buforze

        let vertexCoords = createCoordsDode();
        // console.log(vertexCoords);v

        vertexCoordsBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array(vertexCoords),
          gl.STATIC_DRAW
        );
        vertexCoordsBuffer.itemSize = 2;
        vertexCoordsBuffer.numItems = 12;

        textureBuffer = gl.createTexture();
        var textureImg = new Image();
        textureImg.onload = function () {
          //Wykonanie kodu automatycznie po załadowaniu obrazka
          gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            gl.RGBA,
            gl.RGBA,
            gl.UNSIGNED_BYTE,
            textureImg
          ); //Faktyczne załadowanie danych obrazu do pamieci karty graficznej
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); //Ustawienie parametrów próbkowania tekstury
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        };
        textureImg.src = ""; //Nazwa obrazka

        //Macierze opisujące położenie wirtualnej kamery w przestrzenie 3D
        let aspect = gl.viewportWidth / gl.viewportHeight;
        let fov = (45.0 * Math.PI) / 180.0; //Określenie pola widzenia kamery
        let zFar = 100.0; //Ustalenie zakresów renderowania sceny 3D (od obiektu najbliższego zNear do najdalszego zFar)
        let zNear = 0.1;
        uPMatrix = [
          1.0 / (aspect * Math.tan(fov / 2)),
          0,
          0,
          0,
          0,
          1.0 / Math.tan(fov / 2),
          0,
          0,
          0,
          0,
          -(zFar + zNear) / (zFar - zNear),
          -1,
          0,
          0,
          -(2 * zFar * zNear) / (zFar - zNear),
          0.0,
        ];

        Tick();
      }

      //let angle = 45.0; //Macierz transformacji świata - określenie położenia kamery
      var angleZ = 180.0;
      var angleY = 0.0;
      var angleX = 0.0;
      var tz = -5.0;

      function Tick() {
        let uMVMatrix = [
          1,
          0,
          0,
          0, //Macierz jednostkowa
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVRotZ = [
          +Math.cos((angleZ * Math.PI) / 180.0),
          +Math.sin((angleZ * Math.PI) / 180.0),
          0,
          0,
          -Math.sin((angleZ * Math.PI) / 180.0),
          +Math.cos((angleZ * Math.PI) / 180.0),
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVRotY = [
          +Math.cos((angleY * Math.PI) / 180.0),
          0,
          -Math.sin((angleY * Math.PI) / 180.0),
          0,
          0,
          1,
          0,
          0,
          +Math.sin((angleY * Math.PI) / 180.0),
          0,
          +Math.cos((angleY * Math.PI) / 180.0),
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVRotX = [
          1,
          0,
          0,
          0,
          0,
          +Math.cos((angleX * Math.PI) / 180.0),
          +Math.sin((angleX * Math.PI) / 180.0),
          0,
          0,
          -Math.sin((angleX * Math.PI) / 180.0),
          +Math.cos((angleX * Math.PI) / 180.0),
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVTranslateZ = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, tz, 1];

        uMVMatrix = MatrixMul(uMVMatrix, uMVRotX);
        uMVMatrix = MatrixMul(uMVMatrix, uMVRotY);
        uMVMatrix = MatrixMul(uMVMatrix, uMVRotZ);

        uMVMatrix = MatrixMul(uMVMatrix, uMVTranslateZ);
        //alert(uPMatrix);

        //Render Scene
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clearColor(0.0, 0.0, 0.0, 0); //Wyczyszczenie obrazu kolorem czerwonym
        gl.clearDepth(1.0); //Wyczyścienie bufora głebi najdalszym planem
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.useProgram(shaderProgram); //Użycie przygotowanego programu shaderowego

        gl.enable(gl.DEPTH_TEST); // Włączenie testu głębi - obiekty bliższe mają przykrywać obiekty dalsze
        gl.depthFunc(gl.LEQUAL); //

        gl.uniformMatrix4fv(
          gl.getUniformLocation(shaderProgram, "uPMatrix"),
          false,
          new Float32Array(uPMatrix)
        ); //Wgranie macierzy kamery do pamięci karty graficznej
        gl.uniformMatrix4fv(
          gl.getUniformLocation(shaderProgram, "uMVMatrix"),
          false,
          new Float32Array(uMVMatrix)
        );

        gl.enableVertexAttribArray(
          gl.getAttribLocation(shaderProgram, "aVertexPosition")
        ); //Przekazanie położenia
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(
          gl.getAttribLocation(shaderProgram, "aVertexPosition"),
          vertexPositionBuffer.itemSize,
          gl.FLOAT,
          false,
          0,
          0
        );

        gl.enableVertexAttribArray(
          gl.getAttribLocation(shaderProgram, "aVertexCoords")
        ); //Pass the geometry
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
        gl.vertexAttribPointer(
          gl.getAttribLocation(shaderProgram, "aVertexCoords"),
          vertexCoordsBuffer.itemSize,
          gl.FLOAT,
          false,
          0,
          0
        );

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
        gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);

        gl.drawArrays(
          gl.TRIANGLES,
          0,
          vertexPositionBuffer.numItems * vertexPositionBuffer.itemSize
        ); //Faktyczne wywołanie rendrowania

        //setTimeout(Tick,100);
        requestAnimationFrame(Tick);
      }
      function handlekeydown(e) {
        if (e.keyCode == 87) angleX = angleX + 5.0; //W
        if (e.keyCode == 83) angleX = angleX - 5.0; //S
        if (e.keyCode == 68) angleY = angleY + 5.0;
        if (e.keyCode == 65) angleY = angleY - 5.0;
        if (e.keyCode == 81) angleZ = angleZ + 5.0;
        if (e.keyCode == 69) angleZ = angleZ - 5.0;
        //alert(e.keyCode);
      }
    </script>
    <title>Sfera</title>
  </head>
  <body
    class="bg-darkishh scroll-behavior: smooth;"
    onload="startGL()"
    onkeydown="handlekeydown(event)"
  >
    <script src="https://www.paypal.com/sdk/js?client-id=ASJv0eLnnfcq7X9OsAnR8CTYqE4Yz5rYy5W3OCxHiuDjm-mk25ZH90YesHU4VeI4ppSYBGHZHuq96Gau&currency=PLN"></script>
    <nav
      class="bg-darkishh text-white sticky z-10 top-0 shadow-xl whitespace-nowrap"
    >
      <!-- flex container for nav items -->

      <div class="fontSettings w-full uppercase h-12 text-xl xl:text-3xl">
        <div class="w-2/3 mx-auto">
          <div class="justify-around my-auto flex flex-row space-x-4 p-2">
            <div>
              <a href="/" class="hover:text-goldish font-opensans"
                >Strona Główna</a
              >
            </div>
            <div>
              <a
                onclick="location.href = `/sfera/${window.localStorage.auto.slice(1,-1)}`;"
                class="hover:text-goldish font-opensans"
                >Drukuj</a
              >
            </div> 
          </div>
        </div>
      </div>
    </nav>
    <section id="consistP ">
      <div class="text-center mx-auto pt-10">
        <div class="-space-y-5 my-10 text-white">
          <p class="text-6xl pt-5 uppercase text-white font-sans">podgląd</p>
        </div>
      </div>
    </section>

    <section id="consist ">
      <div class="bg-bgG">
        <div class="w-3/4 text-center mx-auto pt-10">
          <div class="">
            <div class="flex flex-col md:flex-row align-middle">
              
        <div class="mx-auto">
          <canvas
            id="canvas3D"
            class="left-0 md:z-0 mx-auto mt-8 mb-8 "
            height="350"
          ></canvas>
        </div>

              
              <div class="md:w-1/2">
                <div class="flex flex-col">
                  <div class="flex justify-between">
                    <p
                      id="wybierzfbutton"
                      class="min-w-1/3 rounded-lg bg-goldish uppercase tracking-thewidest text-xl py-3 md:px-5 px-4 align-center md:m-2 font-sans"
                    >
                      <input
                        type="file"
                        style="display: none"
                        id="f"
                        accept="image/*"
                      />
                      <input
                        type="button"
                        value="Wybierz plik"
                        id="wybierzf"
                        onclick="document.getElementById('f').click();"
                      />
                    </p>
                    <p
                      id="clear_button"
                      class="min-w-1/3 rounded-lg bg-blackish border-2 border-goldish uppercase tracking-thewidest text-xl py-3 md:px-5 px-4 align-center md:m-2 font-sans"
                    >
                      <button
                        class="WOW text-goldish"
                        id="clear_btn"
                        onclick="clearData();document.location.reload(true);"
                        disabled="true"
                      >
                        Wyczyść
                      </button>
                    </p>
                  </div>
                  <div class="flex justify-around my-10">
                    <p
                      class="rounded-lg bg-blackish border-2 border-goldish min-w-full uppercase tracking-thewidest text-xl py-3 px-5 align-center m-2 font-sans"
                    >
                      <button class="baton text-goldish disabled">Pobierz plik</button>
                    </p>

                      <!--
                    <p
                      class="rounded-lg bg-goldish uppercase tracking-thewidest text-xl py-3 px-5 align-center m-2 font-sans"
                    >
                      <button class="showNet">Pokaż siatkę</button>
                    </p>
-->
                    </p>
                  </div>

                  <div class="flex justify-around m-2">
                    <div
                      id="paypal-button-container"
                      class="min-w-full"
                      onclick="clearData();"
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <pre id="log" style="visibility: hidden"></pre>
    <pre id="stats" style="visibility: hidden"></pre>

    <footer class="w-full bg-darkishh py-12">
      <div class="flex flex-row justify-center">
        <p class="text-white text-center self-center text-xs">
          ©Copyright 2022 Walksee??????
          <br />
          Wszelkie prawa zastrzeżone
          <br />
          Designed and created by Aleksander Pietrzak and Mateusz Starecki
        </p>
      </div>
    </footer>

    <script src="https://cdn.rawgit.com/localForage/localForage/4ce19202/dist/localforage.min.js"></script>
    <script>
      paypal
        .Buttons({
          style: {
            shape: "rect",
            color: "gold",
            layout: "horizontal",
            label: "paypal",
            tagline: false
          },
          // Sets up the transaction when a payment button is clicked
          createOrder: function (data, actions) {
            return fetch("/api/orders", {
              method: "post",
            })
              .then((response) => response.json())
              .then((response) => {
                console.log(response);
                console.log("tworzenie zakupu")
                return response.id;
              });
          },

          // Finalize the transaction after payer approval
          onApprove: function (data, actions) {
            return fetch(`/api/orders/${data.orderID}/capture`, {
              method: "post",
            })
              .then((response) => response.json())
              .then(function (orderData) {
                console.log(
                  "Capture result",
                  orderData,
                  JSON.stringify(orderData, null, 2)
                );
                var transaction =
                  orderData.purchase_units[0].payments.captures[0];

                window.localStorage.setItem(
                  "auto",
                  JSON.stringify(data.orderID)
                );

                window.location.replace(`/sfera/${data.orderID}`);

                // Or go to another URL:  actions.redirect('thank_you.html');
              });
          },
        })
        .render("#paypal-button-container");
    </script>
    <script type="text/javascript">
      function clearData() {
        
        var wybierz = document.getElementById("wybierzf");
        var wybierzbutton = document.getElementById("wybierzfbutton");
        wybierz.classList.remove("text-goldish");
        wybierzbutton.classList.remove(
          "bg-blackish",
          "border-2",
          "border-goldish"
        );
        
        for (let i = 0; i < this.keys.length; i++) {
          localforage.removeItem(this.keys[i]).then(() => {
          
            clear_btn.disabled = true;
            f.removeAttribute("disabled");
            var ul = document.getElementById("list");
            while (ul.firstChild) {
              ul.removeChild(ul.firstChild);
            }
            this.bytes = 0;
            document.getElementById("stats").textContent = "";
          });
        }
      }
    </script>

    <script type="module">
      import { Application } from "./js/runtime.js";
      const canvass = document.getElementById("canvas3dd");
      const appp = new Application(canvass);
      appp.load("./spline_scene/scene2.splinecode");
    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
