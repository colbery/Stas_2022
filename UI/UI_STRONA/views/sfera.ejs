<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <link href="http://fonts.cdnfonts.com/css/pattaya" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/css/bootstrap.css" />
    <script type="text/javascript">
      var gl;
      var shaderProgram;
      var uPMatrix;
      var vertexPositionBuffer;
      //var vertexColorBuffer;
      var indexBuffer;

      function MatrixMul(a, b) {
        //Mnożenie macierzy
        c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (let i = 0; i < 4; i++) {
          for (let j = 0; j < 4; j++) {
            c[i * 4 + j] = 0.0;
            for (let k = 0; k < 4; k++) {
              c[i * 4 + j] += a[i * 4 + k] * b[k * 4 + j];
            }
          }
        }
        return c;
      }

      function createDodecahedron() {
        const t = (1 + Math.sqrt(5)) / 2;
        const d = t - 1;

        let vertexPosition = [
          1,
          1,
          1,
          t,
          0,
          d,
          t,
          0,
          -d, //*/

          1,
          1,
          1,
          t,
          0,
          -d,
          1,
          1,
          -1, //*/

          1,
          1,
          1,
          1,
          1,
          -1,
          d,
          t,
          0, //*/

          t,
          0,
          -d,
          1,
          -1,
          -1,
          0,
          -d,
          -t, //*/

          t,
          0,
          -d,
          0,
          -d,
          -t,
          0,
          d,
          -t, //*/

          t,
          0,
          -d,
          0,
          d,
          -t,
          1,
          1,
          -1, //*/

          0,
          -d,
          -t,
          -1,
          -1,
          -1,
          -t,
          0,
          -d, //*/

          0,
          -d,
          -t,
          -t,
          0,
          -d,
          -1,
          1,
          -1, //*/

          0,
          -d,
          -t,
          -1,
          1,
          -1,
          0,
          d,
          -t, //*/

          -t,
          0,
          d,
          -1,
          -1,
          1,
          0,
          -d,
          t, //*/

          -t,
          0,
          d,
          0,
          -d,
          t,
          0,
          d,
          t, //*/

          -t,
          0,
          d,
          0,
          d,
          t,
          -1,
          1,
          1, //*/

          0,
          d,
          t,
          0,
          -d,
          t,
          1,
          -1,
          1, //*/

          0,
          d,
          t,
          1,
          -1,
          1,
          t,
          0,
          d, //*/

          0,
          d,
          t,
          t,
          0,
          d,
          1,
          1,
          1, //*/

          t,
          0,
          d,
          1,
          -1,
          1,
          d,
          -t,
          0, //*/

          t,
          0,
          d,
          d,
          -t,
          0,
          1,
          -1,
          -1, //*/

          t,
          0,
          d,
          1,
          -1,
          -1,
          t,
          0,
          -d, //*/

          1,
          1,
          -1,
          0,
          d,
          -t,
          -1,
          1,
          -1, //*/
          //*
          //_________________________________________________________
          //wierzcholki ze zla interpolacją na teksture

          // -1,  1,  1,
          // 0,  d,  t,
          // 1,  1,  1,//*/

          // -1,  1,  1,
          //   1,  1,  1,
          //   d,  t,  0,//*/

          // -1,  1,  1,
          //   d,  t,  0,
          // -d,  t,  0,//*/

          //  -1, -1, -1,
          //  -d, -t,  0,
          //  -1, -1,  1,//*/

          //  -1, -1, -1,
          //  -1, -1,  1,
          //  -t,  0,  d,//*/

          //  -1, -1, -1,
          //  -t,  0,  d,
          //  -t,  0, -d,//*/

          //  -1,  1, -1,
          //  -t,  0, -d,
          //  -t,  0,  d,//*/

          //  -1,  1, -1,
          //  -t,  0,  d,
          //  -1,  1,  1,//*/

          //  -1,  1, -1,
          //  -1,  1,  1,
          //  -d,  t,  0,//*/

          //   1, -1, -1,
          //   d, -t,  0,
          //  -d, -t,  0,//*/

          //   1, -1, -1,
          //  -d, -t,  0,
          //  -1, -1, -1,//*/

          //   1, -1, -1,
          //  -1, -1, -1,
          //   0, -d, -t,//*/

          //            -1, -1, -1,
          //            -d, -t,  0,
          //            -1, -1,  1,//*/

          //            -1, -1, -1,
          //            -1, -1,  1,
          //            -t,  0,  d,//*/

          //            -1, -1, -1,
          //            -t,  0,  d,
          //            -t,  0, -d,//*/

          //            -1,  1, -1,
          //            -t,  0, -d,
          //            -t,  0,  d,//*/

          //            -1,  1, -1,
          //            -t,  0,  d,
          //            -1,  1,  1,//*/

          //            -1,  1, -1,
          //            -1,  1,  1,
          //            -d,  t,  0,//*/

          //                       -1,  1,  1,
          //             d,  t,  0,
          //           -d,  t,  0,//*/

          //             1,  1, -1,
          //            -1,  1, -1,
          //            -d,  t,  0,//*/

          //             1,  1, -1,
          //            -d,  t,  0,
          //             d,  t,  0,//*/

          //            -1, -1,  1,
          //            -d, -t,  0,
          //             d, -t,  0,//*/
          //  //*
          //            -1, -1,  1,
          //   	        d, -t,  0,
          //             1, -1,  1,//*/
          //   //*
          //            -1, -1,  1,
          //             1, -1,  1,
          //             0, -d,  t//*/

          //_________________________________________________________

          //poprawione wierzcholki
          -d,
          -t,
          -0.000001,
          -t,
          0,
          -0.000001,
          -t,
          0,
          -d, //*/

          -d,
          -t,
          0,
          -t,
          0,
          d,
          -t,
          0,
          0, //*/

          -d,
          -t,
          -0.000001,
          -t,
          0,
          -d, //*/
          -1,
          -1,
          -1,

          -d,
          -t,
          0,
          -1,
          -1,
          1,
          -t,
          0,
          d,

          //___________________________________________
          -d,
          t,
          -0.000001,
          -t,
          0,
          -d,
          -t,
          0,
          -0.00001, //*/

          -d,
          t,
          0,
          -t,
          0,
          0,
          -t,
          0,
          d, //*/

          -d,
          t,
          0,
          -t,
          0,
          d,
          -1,
          1,
          1, //*/

          -d,
          t,
          -0.0000001,
          -1,
          1,
          -1,
          -t,
          0,
          -d, //*/

          //___________________________________________

          0,
          -d,
          -t,
          -1,
          -1,
          -1,
          1,
          -1,
          -1, //*/

          1,
          -1,
          -1,
          -1,
          -1,
          -1,
          0,
          -t + 0.00001,
          -0.00001,

          -1,
          -1,
          -1,
          0,
          -t + 0.00001,
          -0.00001,
          -d,
          -t + 0.00001,
          -0.00001,

          1,
          -1,
          -1,
          0,
          -t + 0.00001,
          -0.00001,
          d,
          -t + 0.00001,
          -0.00001,

          //___________________________________________
          0,
          -d,
          t,
          -1,
          -1,
          1,
          1,
          -1,
          1, //*/

          1,
          -1,
          1,
          -1,
          -1,
          1,
          0,
          -t + 0.00001,
          0.00001,

          -1,
          -1,
          1,
          0,
          -t + 0.00001,
          0.00001,
          -d,
          -t + 0.00001,
          0.00001,

          1,
          -1,
          1,
          0,
          -t + 0.00001,
          0.00001,
          d,
          -t + 0.00001,
          0.00001,

          //___________________________________________
          0,
          d,
          t,
          -1,
          1,
          1,
          1,
          1,
          1, //*/

          1,
          1,
          1,
          -1,
          1,
          1,
          0,
          t + 0.00001,
          0.00001,

          -1,
          1,
          1,
          0,
          t + 0.00001,
          0.00001,
          -d,
          t + 0.00001,
          0.00001,

          1,
          1,
          1,
          0,
          t + 0.00001,
          0.00001,
          d,
          t + 0.00001,
          0.00001,

          //___________________________________________
          1,
          1,
          -1,
          -1,
          1,
          -1,
          0,
          t + 0.00001,
          -0.00001,

          -1,
          1,
          -1,
          0,
          t + 0.00001,
          -0.00001,
          -d,
          t + 0.00001,
          -0.00001,

          1,
          1,
          -1,
          0,
          t + 0.00001,
          -0.00001,
          d,
          t + 0.00001,
          -0.00001,
        ];

        return vertexPosition;
      }

      function createCoordsDode() {
        let position = createDodecahedron();
        let vertexCoords = [];

        for (let i = 0; i < position.length; i += 3) {
          const X = position[i + 0];
          const Y = position[i + 1];
          const Z = position[i + 2];
          const fi = Math.atan2(-Z, X); //atan(-Z/X)
          const phi = Math.asin(Y / Math.sqrt(X * X + Y * Y + Z * Z)); //asin(Y/|R|)
          const u = fi / (2 * Math.PI) + 0.5;
          const v = phi / Math.PI + 0.5;

          vertexCoords.push(...[u, v]);
        }

        // console.log(position.length);
        return vertexCoords;
      }

      function startGL() {
        f.onchange = upload;
        var img = null;
        var keys = [];
        var bytes = 0;
        var numFiles = 0;

        function getKeys() {
          log.textContent = "Getting keys...";
          localforage.keys().then(function (keys) {
            this.keys = [];
            var f = document.getElementById("f");
            var ul = document.getElementById("list");
            if (keys.length === 1) {
              f.setAttribute("disabled", "disabled");
            }
            if (keys.length > 0) {
              clear_btn.disabled = false;
            }

            for (let i = 0; i < keys.length; i++) {
              var li = document.createElement("li");
              li.appendChild(document.createTextNode(keys[i]));
              ul.appendChild(li);
              ul.onclick = (e) => play(e.target.innerHTML);
              this.keys.push(keys[i]);
            }

            log.textContent = "Done";
          });
        }
        getKeys();
        //getFile();

        function stopAll() {
          console.log("stop all");
          if (this.img) {
            clearImage();
          }
        }

        function play(filename) {
          stopAll();

          const ext = filename.split(".").pop().toLowerCase();
          console.log(ext);
          switch (ext) {
            case "jpg":
            case "jpeg":
            case "png":
              showImage(filename);
              break;
            default:
              console.error("not a valid type");
              break;
          }
          window.scrollTo(1, 0);
        }

        function showImage(filename) {
          log.textContent = "loading: " + filename + "...";
          localforage.getItem(filename).then((blob) => {
            textureImg.src = URL.createObjectURL(blob);
            
          });
        }

        function clearImage() {
          textureImg.src = "";
          this.img.style.display = "none";
        }

        function upload() {
          const promises = [];
          log.textContent = "Adding to localstorage...";

          for (let i = 0; i < this.files.length; i++) {
            addBytes(this.files[0].size);
            const promise = localforage.setItem(this.files[i].name, f.files[i]);
            promises.push(promise);
          }

          Promise.all(promises).then(() => {
            log.textContent = "Added Successfully.";
            getKeys();
          });
        }

        function addBytes(bytes) {
          console.log("param bytes: " + bytes);
          console.log("numFiles bytes: " + this.numFiles);
          this.bytes += bytes;
          this.numFiles += 1;
          console.log("numFiles: " + this.numFiles);
          console.log("total bytes: " + this.bytes);
          stats.textContent =
            this.numFiles + " items and " + this.bytes + " total bytes";
        }
        let canvas = document.getElementById("canvas3D"); //wyszukanie obiektu w strukturze strony
        gl = canvas.getContext("experimental-webgl"); //pobranie kontekstu OpenGL'u z obiektu canvas
        gl.viewportWidth = canvas.width; //przypisanie wybranej przez nas rozdzielczości do systemu OpenGL
        gl.viewportHeight = canvas.height;

        //Kod shaderów
        const vertextShaderSource = ` //Znak akcentu z przycisku tyldy - na lewo od przycisku 1 na klawiaturze
          precision highp float;
          attribute vec3 aVertexPosition; 
          //attribute vec3 aVertexColor;
          attribute vec2 aVertexCoords;
          uniform mat4 uMVMatrix;
          uniform mat4 uPMatrix;
          varying vec3 vColor;
          varying vec2 vTexUV;
      
      
          void main(void) {
            gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); //Dokonanie transformacji położenia punktów z przestrzeni 3D do przestrzeni obrazu (2D)
            //vColor = aVertexColor;
            vTexUV = aVertexCoords;
          }
        `;
        const fragmentShaderSource = `
          precision highp float;
          //varying vec3 vColor;
          varying vec2 vTexUV;
          
          uniform sampler2D uSampler;
          void main(void) {
            //gl_FragColor = vec4(vColor,1.0); //Ustalenie stałego koloru wszystkich punktów sceny
            gl_FragColor = texture2D(uSampler,vTexUV); //Odczytanie punktu tekstury i przypisanie go jako koloru danego punktu renderowaniej figury
          }
        `;
        let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER); //Stworzenie obiektu shadera
        let vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(fragmentShader, fragmentShaderSource); //Podpięcie źródła kodu shader
        gl.shaderSource(vertexShader, vertextShaderSource);
        gl.compileShader(fragmentShader); //Kompilacja kodu shader
        gl.compileShader(vertexShader);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
          //Sprawdzenie ewentualnych błedów kompilacji
          alert(gl.getShaderInfoLog(fragmentShader));
          return null;
        }
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
          alert(gl.getShaderInfoLog(vertexShader));
          return null;
        }

        shaderProgram = gl.createProgram(); //Stworzenie obiektu programu
        gl.attachShader(shaderProgram, vertexShader); //Podpięcie obu shaderów do naszego programu wykonywanego na karcie graficznej
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
          alert("Could not initialise shaders"); //Sprawdzenie ewentualnych błedów

        let vertexPosition = createDodecahedron();
        // console.log(vertexPosition.length);

        vertexPositionBuffer = gl.createBuffer(); //Stworzenie tablicy w pamieci karty graficznej
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array(vertexPosition),
          gl.STATIC_DRAW
        );
        vertexPositionBuffer.itemSize = 3; //zdefiniowanie liczby współrzednych per wierzchołek
        vertexPositionBuffer.numItems = vertexPosition.length / (3 * 3); //Zdefinoiowanie liczby punktów w naszym buforze

        let vertexCoords = createCoordsDode();
        // console.log(vertexCoords);v

        vertexCoordsBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array(vertexCoords),
          gl.STATIC_DRAW
        );
        vertexCoordsBuffer.itemSize = 2;
        vertexCoordsBuffer.numItems = 12;

        textureBuffer = gl.createTexture();
        var textureImg = new Image();
        textureImg.onload = function () {
          //Wykonanie kodu automatycznie po załadowaniu obrazka
          gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            gl.RGBA,
            gl.RGBA,
            gl.UNSIGNED_BYTE,
            textureImg
          ); //Faktyczne załadowanie danych obrazu do pamieci karty graficznej
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); //Ustawienie parametrów próbkowania tekstury
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        };
        textureImg.src = ""; //Nazwa obrazka

        //Macierze opisujące położenie wirtualnej kamery w przestrzenie 3D
        let aspect = gl.viewportWidth / gl.viewportHeight;
        let fov = (45.0 * Math.PI) / 180.0; //Określenie pola widzenia kamery
        let zFar = 100.0; //Ustalenie zakresów renderowania sceny 3D (od obiektu najbliższego zNear do najdalszego zFar)
        let zNear = 0.1;
        uPMatrix = [
          1.0 / (aspect * Math.tan(fov / 2)),
          0,
          0,
          0,
          0,
          1.0 / Math.tan(fov / 2),
          0,
          0,
          0,
          0,
          -(zFar + zNear) / (zFar - zNear),
          -1,
          0,
          0,
          -(2 * zFar * zNear) / (zFar - zNear),
          0.0,
        ];

        Tick();
      }

      //let angle = 45.0; //Macierz transformacji świata - określenie położenia kamery
      var angleZ = 180.0;
      var angleY = 0.0;
      var angleX = 0.0;
      var tz = -5.0;

      function Tick() {
        let uMVMatrix = [
          1,
          0,
          0,
          0, //Macierz jednostkowa
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVRotZ = [
          +Math.cos((angleZ * Math.PI) / 180.0),
          +Math.sin((angleZ * Math.PI) / 180.0),
          0,
          0,
          -Math.sin((angleZ * Math.PI) / 180.0),
          +Math.cos((angleZ * Math.PI) / 180.0),
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVRotY = [
          +Math.cos((angleY * Math.PI) / 180.0),
          0,
          -Math.sin((angleY * Math.PI) / 180.0),
          0,
          0,
          1,
          0,
          0,
          +Math.sin((angleY * Math.PI) / 180.0),
          0,
          +Math.cos((angleY * Math.PI) / 180.0),
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVRotX = [
          1,
          0,
          0,
          0,
          0,
          +Math.cos((angleX * Math.PI) / 180.0),
          +Math.sin((angleX * Math.PI) / 180.0),
          0,
          0,
          -Math.sin((angleX * Math.PI) / 180.0),
          +Math.cos((angleX * Math.PI) / 180.0),
          0,
          0,
          0,
          0,
          1,
        ];

        let uMVTranslateZ = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, tz, 1];

        uMVMatrix = MatrixMul(uMVMatrix, uMVRotX);
        uMVMatrix = MatrixMul(uMVMatrix, uMVRotY);
        uMVMatrix = MatrixMul(uMVMatrix, uMVRotZ);

        uMVMatrix = MatrixMul(uMVMatrix, uMVTranslateZ);
        //alert(uPMatrix);

        //Render Scene
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clearColor(0.0, 0.0, 0.0, 0); //Wyczyszczenie obrazu kolorem czerwonym
        gl.clearDepth(1.0); //Wyczyścienie bufora głebi najdalszym planem
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.useProgram(shaderProgram); //Użycie przygotowanego programu shaderowego

        gl.enable(gl.DEPTH_TEST); // Włączenie testu głębi - obiekty bliższe mają przykrywać obiekty dalsze
        gl.depthFunc(gl.LEQUAL); //

        gl.uniformMatrix4fv(
          gl.getUniformLocation(shaderProgram, "uPMatrix"),
          false,
          new Float32Array(uPMatrix)
        ); //Wgranie macierzy kamery do pamięci karty graficznej
        gl.uniformMatrix4fv(
          gl.getUniformLocation(shaderProgram, "uMVMatrix"),
          false,
          new Float32Array(uMVMatrix)
        );

        gl.enableVertexAttribArray(
          gl.getAttribLocation(shaderProgram, "aVertexPosition")
        ); //Przekazanie położenia
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(
          gl.getAttribLocation(shaderProgram, "aVertexPosition"),
          vertexPositionBuffer.itemSize,
          gl.FLOAT,
          false,
          0,
          0
        );

        gl.enableVertexAttribArray(
          gl.getAttribLocation(shaderProgram, "aVertexCoords")
        ); //Pass the geometry
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
        gl.vertexAttribPointer(
          gl.getAttribLocation(shaderProgram, "aVertexCoords"),
          vertexCoordsBuffer.itemSize,
          gl.FLOAT,
          false,
          0,
          0
        );

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, textureBuffer);
        gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);

        gl.drawArrays(
          gl.TRIANGLES,
          0,
          vertexPositionBuffer.numItems * vertexPositionBuffer.itemSize
        ); //Faktyczne wywołanie rendrowania

        //setTimeout(Tick,100);
        requestAnimationFrame(Tick);
      }
      function handlekeydown(e) {
        if (e.keyCode == 87) angleX = angleX + 5.0; //W
        if (e.keyCode == 83) angleX = angleX - 5.0; //S
        if (e.keyCode == 68) angleY = angleY + 5.0;
        if (e.keyCode == 65) angleY = angleY - 5.0;
        if (e.keyCode == 81) angleZ = angleZ + 5.0;
        if (e.keyCode == 69) angleZ = angleZ - 5.0;
        //alert(e.keyCode);
      }
    </script>
    <title>Sfera</title>
  </head>
  <body onload="startGL()" onkeydown="handlekeydown(event)">
    <script src="https://www.paypal.com/sdk/js?client-id=ASJv0eLnnfcq7X9OsAnR8CTYqE4Yz5rYy5W3OCxHiuDjm-mk25ZH90YesHU4VeI4ppSYBGHZHuq96Gau&currency=PLN"></script>
    <nav
    class="navbar navbar-expand-lg navbar-dark text-white px-2"
    style="background-color: #373737"
  >
    <a class="navbar-brand" href="/">360</a>
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#navbarNav"
      aria-controls="navbarNav"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav">
        <li class="nav-item active">
          <a class="nav-link" href="/"
            >Strona główna</a
          >
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/sfera">Sfera</a>
        </li>
       
      
      </ul>
    </div>
  </nav>
    <div class="container-fluid" style="background-color: #dbdbdb; padding: 0">
      <div class="row">
        <div class="col-6">
          <div class="dwunastoscian_title">Dwunastościan</div>
        </div>
        <div class="col-6" style="background-color: #a2a2a2">
          <div class="osmioscian_title">Ośmiościan ścięty</div>
        </div>
      </div>
      <div
        class="container-fluid"
        style="background-color: #ffffff; padding: 0"
      >
        <div class="row">
          <div class="col-6">
            <div class="can">
              <canvas id="canvas3D" width="640" height="480"></canvas>
            </div>
          </div>
          <div class="col-6" style="background-color: #ffffff">
            <div class="spline"><canvas id="canvas3dd"></canvas></div>
          </div>
        </div>
      </div>
      <div class="container-fluid" style="padding: 0">
        <div class="row">
          <div class="col-1" style="background-color: #fdf6dc">
          </div>
          <div class="col-5" style="background-color: #fdf6dc">
            <div class="discription_">
              <div class="discription_title">Prześlij swoje zdjęcie.</div>
              <div class="discription_text">
                Prześlij swoje zdjęcie kilkajać przycisk “wybierz plik”,
              </div>
              <div class="discription_text_down">
                Sprawdz na podglądzie czy efekt jest zadawalający  i przejdz do
                płatności aby pobrać obraz gotowy do wydruku.
              </div>
              <div class="discription_text_down">
                ( kręć podglądem poprzez klawisze A i D )
              </div>
            </div>
          </div>
          
          <div class="col-5" style="background-color: #fdf6dc">
            <div class="discription_">
              <div class="discription_title">Instrukcja złożenia figury.</div>

              <div class="discription_text_down " >
                Kliknij poniższy przycisk, aby pobrać dokładną instukcje
                złożenia wybranej bryły.
                <div class="description_button">
                  <button type="button" class="btn btn-dark">
                    <a href="../pdf/skladanie.pdf" style="color: #FFFFFF;
                    text-decoration: none;"download>Sciągnij PDF</a>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div class="col-1" style="background-color: #fdf6dc">
          </div>
        </div>
      </div>
    </div>
    <div class="container-fluid" style="padding: 0">
      <div class="row">
        <div class="col-1" style="background-color: #fdf6dc">
        </div>
        <div class="col-5" style="background-color: #fdf6dc">
          <div class="discription_" style="padding-top: 5%;padding-right: 5%;">
            <label for="f" class="custom-file-upload">
              Wybierz plik
          </label>
            <input type="file" id="f" accept="image/*"/>
        <div class="file_desc">
          Po wprowadzeniu zdjęcia naciśnij na jego nazwę aby oteksturować dwunastośćian.
        </div>
        <div class="arrow_padd" style="padding-bottom:1%"><i class="arrow down"></i></div>
        
           
            <div >  
              <ul id="list"></ul>
            </div>
            <div class="file_desc">
             Aby zmienić wprowadzone zdjęcie należy nacisnąć przycisk "wyczyść" oraz ponownie wprowadzić zdjęcie poprzez przycisk "wybierz plik".
            </div>
            <div class="clear_padd" style="padding-top: 5%;"><button id="clear_btn" onclick="clearData()" disabled='true'>Wyczyść</button></div>
            
            
          </div>
        </div>
        
        <div class="col-5" style="background-color: #fdf6dc">
          <div class="discription_" style="padding-left:5% ;padding-top: 5%;">
            <div class="discription_title">Zapłać jedyne 1zł!</div>
            <div id="paypal-button-container"></div>
            </div>
          </div>
          <div class="col-1" style="background-color: #fdf6dc">
          </div>
        </div>
      </div>
    </div>
  
    <pre id="log" style="visibility: hidden;"></pre> 
    <pre id="stats" style="visibility: hidden;"></pre>
    
    

   
   <script src="https://cdn.rawgit.com/localForage/localForage/4ce19202/dist/localforage.min.js"></script>
 <script>
  paypal
    .Buttons({
      // Sets up the transaction when a payment button is clicked
      createOrder: function (data, actions) {
        return fetch("/api/orders", {
          method: "post",
        })
          .then((response) => response.json())
          .then((response) => {
            console.log(response);
            return response.id;
          });
      },

      // Finalize the transaction after payer approval
      onApprove: function (data, actions) {
        return fetch(`/api/orders/${data.orderID}/capture`, {
          method: "post",
        })
          .then((response) => response.json())
          .then(function (orderData) {
            console.log(
              "Capture result",
              orderData,
              JSON.stringify(orderData, null, 2)
            );
            var transaction =
              orderData.purchase_units[0].payments.captures[0];

            window.localStorage.setItem(
              "auto",
              JSON.stringify(data.orderID)
            );

            window.location.replace(`/sfera/${data.orderID}`);

            // Or go to another URL:  actions.redirect('thank_you.html');
          });
      },
    })
    .render("#paypal-button-container");
</script>
<script type="text/javascript">
  function clearData() {
console.log("clear");
log.textContent = "Clearing data...";
for (let i = 0; i < this.keys.length; i++) {
localforage.removeItem(this.keys[i]).then(() => {
  log.textContent = "Done";
  clear_btn.disabled = true;
  f.removeAttribute("disabled");
  var ul = document.getElementById("list");
  while (ul.firstChild) {
    ul.removeChild(ul.firstChild);
  }
  this.bytes = 0;
  document.getElementById("stats").textContent = "";
});
}
}

</script>

    <script type="module">
      import { Application } from "./js/runtime.js";
      const canvass = document.getElementById("canvas3dd");
      const appp = new Application(canvass);
      appp.load("./spline_scene/scene2.splinecode");
    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
